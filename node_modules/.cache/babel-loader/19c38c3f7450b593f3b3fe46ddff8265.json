{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/* eslint complexity: ['error', 17] */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Group } from '@vx/group';\nimport { scaleBand, scaleLinear } from '@vx/scale';\nimport { WithTooltip, withTooltipPropTypes } from '@data-ui/shared';\nimport { isAxis, isSeries } from '../utils/componentIsX';\nimport collectBinnedDataFromChildSeries from '../utils/collectBinnedDataFromChildSeries';\nimport componentName from '../utils/componentName';\nimport computeDomainsFromBins from '../utils/computeDomainsFromBins';\nimport getValueKey from '../utils/getValueKey';\nimport shallowCompareObjectEntries from '../utils/shallowCompareObjectEntries';\nimport { themeShape } from '../utils/propShapes';\nexport var propTypes = _extends({}, withTooltipPropTypes, {\n  ariaLabel: PropTypes.string.isRequired,\n  binValues: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  binCount: PropTypes.number,\n  binType: PropTypes.oneOf(['numeric', 'categorical']),\n  children: PropTypes.node.isRequired,\n  cumulative: PropTypes.bool,\n  height: PropTypes.number.isRequired,\n  horizontal: PropTypes.bool,\n  limits: PropTypes.arrayOf(PropTypes.number),\n  // values outside the limits are ignored\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }),\n  normalized: PropTypes.bool,\n  renderTooltip: PropTypes.func,\n  theme: themeShape,\n  width: PropTypes.number.isRequired,\n  valueAccessor: PropTypes.func\n});\nvar defaultProps = {\n  binCount: 10,\n  binType: 'numeric',\n  binValues: null,\n  cumulative: false,\n  horizontal: false,\n  limits: null,\n  margin: {\n    top: 32,\n    right: 32,\n    bottom: 64,\n    left: 64\n  },\n  normalized: false,\n  renderTooltip: null,\n  theme: {},\n  valueAccessor: function valueAccessor(d) {\n    return d;\n  }\n};\n\nvar Histogram =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Histogram, _React$PureComponent);\n\n  function Histogram(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this.state = _this.getStateFromProps(props);\n    return _this;\n  }\n\n  var _proto = Histogram.prototype;\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var shouldComputeBinsAndScales = false; // eslint-disable-next-line react/destructuring-assignment\n\n    if (['width', 'height', 'children'].some(function (prop) {\n      return _this2.props[prop] !== nextProps[prop];\n    })) {\n      shouldComputeBinsAndScales = true;\n    }\n\n    if (['margin'].some( // eslint-disable-next-line react/destructuring-assignment\n    function (prop) {\n      return !shallowCompareObjectEntries(_this2.props[prop], nextProps[prop]);\n    })) {\n      shouldComputeBinsAndScales = true;\n    }\n\n    if (shouldComputeBinsAndScales) this.setState(this.getStateFromProps(nextProps));\n  };\n\n  _proto.getStateFromProps = function getStateFromProps(props) {\n    var dimensions = this.getDimmensions(props);\n    var binsByIndex = this.getBinnedData(props);\n    var scales = this.getScales(props, binsByIndex, dimensions);\n    return _extends({\n      binsByIndex: binsByIndex\n    }, dimensions, scales);\n  };\n\n  _proto.getDimmensions = function getDimmensions(props) {\n    var _ref = props || this.props,\n        margin = _ref.margin,\n        width = _ref.width,\n        height = _ref.height;\n\n    var completeMargin = _extends({}, defaultProps.margin, margin);\n\n    return {\n      margin: completeMargin,\n      innerHeight: height - completeMargin.top - completeMargin.bottom,\n      innerWidth: width - completeMargin.left - completeMargin.right\n    };\n  };\n\n  _proto.getBinnedData = function getBinnedData(props) {\n    var _ref2 = props || this.props,\n        children = _ref2.children,\n        binCount = _ref2.binCount,\n        binType = _ref2.binType,\n        binValues = _ref2.binValues,\n        limits = _ref2.limits,\n        valueAccessor = _ref2.valueAccessor;\n\n    return collectBinnedDataFromChildSeries({\n      children: children,\n      binCount: binCount,\n      binType: binType,\n      binValues: binValues,\n      limits: limits,\n      valueAccessor: valueAccessor\n    });\n  };\n\n  _proto.getScales = function getScales(props, binsByIndex, _ref3) {\n    var innerHeight = _ref3.innerHeight,\n        innerWidth = _ref3.innerWidth;\n\n    var _ref4 = props || this.props,\n        binType = _ref4.binType,\n        binValues = _ref4.binValues,\n        cumulative = _ref4.cumulative,\n        horizontal = _ref4.horizontal,\n        normalized = _ref4.normalized;\n\n    var binScaleFunc = binType === 'numeric' ? scaleLinear : scaleBand;\n    var valueKey = getValueKey({\n      normalized: normalized,\n      cumulative: cumulative\n    });\n\n    var _computeDomainsFromBi = computeDomainsFromBins({\n      binsByIndex: binsByIndex,\n      binType: binType,\n      binValues: binValues,\n      valueKey: valueKey\n    }),\n        binDomain = _computeDomainsFromBi.binDomain,\n        valueDomain = _computeDomainsFromBi.valueDomain;\n\n    var binRange = horizontal ? [innerHeight, 0] : [0, innerWidth];\n    var valueRange = horizontal ? [0, innerWidth] : [innerHeight, 0]; // when viewing categorical data horizontally it is more natural to\n    // read alphabetical from top down\n\n    if (horizontal && binType === 'categorical') binRange.reverse();\n    return {\n      binScale: binScaleFunc({\n        range: binRange,\n        domain: binDomain\n      }),\n      valueScale: scaleLinear({\n        range: valueRange,\n        domain: valueDomain\n      }),\n      valueKey: valueKey\n    };\n  };\n\n  _proto.render = function render() {\n    var renderTooltip = this.props.renderTooltip;\n\n    if (renderTooltip) {\n      return React.createElement(WithTooltip, {\n        renderTooltip: renderTooltip\n      }, React.createElement(Histogram, _extends({}, this.props, {\n        renderTooltip: null\n      })));\n    }\n\n    var _this$props = this.props,\n        ariaLabel = _this$props.ariaLabel,\n        binType = _this$props.binType,\n        binValues = _this$props.binValues,\n        children = _this$props.children,\n        height = _this$props.height,\n        horizontal = _this$props.horizontal,\n        onMouseLeave = _this$props.onMouseLeave,\n        onMouseMove = _this$props.onMouseMove,\n        theme = _this$props.theme,\n        valueAccessor = _this$props.valueAccessor,\n        width = _this$props.width;\n    var _this$state = this.state,\n        binsByIndex = _this$state.binsByIndex,\n        binScale = _this$state.binScale,\n        innerHeight = _this$state.innerHeight,\n        innerWidth = _this$state.innerWidth,\n        margin = _this$state.margin,\n        valueKey = _this$state.valueKey,\n        valueScale = _this$state.valueScale;\n    return React.createElement(\"svg\", {\n      \"aria-label\": ariaLabel,\n      role: \"img\",\n      width: width,\n      height: height\n    }, React.createElement(Group, {\n      left: margin.left,\n      top: margin.top\n    }, React.Children.map(children, function (Child, index) {\n      var name = componentName(Child);\n\n      if (isSeries(name)) {\n        var binnedData = binsByIndex[index];\n        return React.cloneElement(Child, {\n          binScale: binScale,\n          binType: binType,\n          binnedData: binnedData,\n          horizontal: horizontal,\n          valueAccessor: valueAccessor,\n          valueKey: valueKey,\n          valueScale: valueScale,\n          onMouseLeave: onMouseLeave,\n          onMouseMove: onMouseMove\n        });\n      } else if (isAxis(name)) {\n        var styleKey = name[0].toLowerCase();\n        var binOrValue = name === 'XAxis' && !horizontal || name === 'YAxis' && horizontal ? 'bin' : 'value';\n        var tickValues = Child.props.tickValues || (binOrValue === 'bin' && binValues ? binValues : null);\n        return React.cloneElement(Child, {\n          top: name === 'YAxis' || Child.props.orientation === 'top' ? 0 : innerHeight,\n          left: name === 'XAxis' || Child.props.orientation === 'left' ? 0 : innerWidth,\n          label: Child.props.label || (binOrValue === 'value' ? valueKey : null),\n          scale: binOrValue === 'value' ? valueScale : binScale,\n          axisStyles: _extends({}, theme[styleKey + \"AxisStyles\"], Child.props.axisStyles),\n          tickStyles: _extends({}, theme[styleKey + \"TickStyles\"], Child.props.tickStyles),\n          tickValues: tickValues\n        });\n      }\n\n      return Child;\n    })));\n  };\n\n  return Histogram;\n}(React.PureComponent);\n\nHistogram.propTypes = propTypes;\nHistogram.defaultProps = defaultProps;\nHistogram.displayName = 'Histogram';\nexport default Histogram;","map":null,"metadata":{},"sourceType":"module"}