{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NodeGroup } from 'react-move';\nimport { AreaClosed, LinePath } from '@vx/shape';\nimport { curveBasis } from '@vx/curve';\nimport { Group } from '@vx/group';\nimport { chartTheme } from '@data-ui/theme';\nvar propTypes = {\n  densityData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // @TODO shape\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  fillOpacity: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  getX: PropTypes.func.isRequired,\n  getY: PropTypes.func.isRequired,\n  horizontal: PropTypes.bool,\n  keyAccessor: PropTypes.func,\n  showArea: PropTypes.bool,\n  showLine: PropTypes.bool,\n  stroke: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeDasharray: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeLinecap: PropTypes.oneOf(['butt', 'square', 'round', 'inherit']),\n  strokeWidth: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  xScale: PropTypes.func.isRequired,\n  yScale: PropTypes.func.isRequired\n};\nvar defaultProps = {\n  fill: chartTheme.colors.default,\n  fillOpacity: 0.3,\n  horizontal: false,\n  showArea: true,\n  showLine: true,\n  stroke: chartTheme.colors.default,\n  strokeWidth: 2,\n  strokeDasharray: null,\n  strokeLinecap: 'round',\n  keyAccessor: function keyAccessor(d) {\n    return d.id;\n  }\n};\nvar INDEX_DELAY_MULTIPLIER = 10;\n\nfunction AnimatedDensitySeries(_ref) {\n  var densityData = _ref.densityData,\n      fill = _ref.fill,\n      fillOpacity = _ref.fillOpacity,\n      horizontal = _ref.horizontal,\n      keyAccessor = _ref.keyAccessor,\n      getX = _ref.getX,\n      getY = _ref.getY,\n      showArea = _ref.showArea,\n      showLine = _ref.showLine,\n      stroke = _ref.stroke,\n      strokeWidth = _ref.strokeWidth,\n      strokeDasharray = _ref.strokeDasharray,\n      strokeLinecap = _ref.strokeLinecap,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale;\n  var maxY = Math.max.apply(Math, yScale.range());\n  return React.createElement(NodeGroup, {\n    data: densityData,\n    keyAccessor: keyAccessor,\n    start: function start(d) {\n      if (horizontal) return {\n        x: 0,\n        y: yScale.invert ? yScale(getY(d)) : getY(d)\n      };\n      return {\n        x: xScale.invert ? xScale(getX(d)) : getX(d),\n        y: maxY\n      };\n    },\n    enter: function enter(d, i) {\n      return {\n        x: [xScale.invert ? xScale(getX(d)) : getX(d)],\n        y: [yScale.invert ? yScale(getY(d)) : getY(d)],\n        fill: [d.fill || fill],\n        stroke: [d.stroke || stroke],\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER * i\n        }\n      };\n    },\n    update: function update(d, i) {\n      return {\n        x: [xScale.invert ? xScale(getX(d)) : getX(d)],\n        y: [yScale.invert ? yScale(getY(d)) : getY(d)],\n        fill: [d.fill || fill],\n        stroke: [d.stroke || stroke],\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER * i\n        }\n      };\n    },\n    leave: function leave(d, i) {\n      return {\n        x: xScale.invert ? xScale(getX(d)) : getX(d),\n        y: horizontal ? 0 : maxY,\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER / 2 * i\n        }\n      };\n    }\n  }, function (modifiedData) {\n    return React.createElement(Group, {\n      style: {\n        pointerEvents: 'none'\n      }\n    }, showArea && React.createElement(AreaClosed, {\n      data: modifiedData,\n      x: function x(d) {\n        return xScale.invert ? xScale.invert(d.state.x) : d.state.x;\n      },\n      y: function y(d) {\n        return yScale.invert ? yScale.invert(d.state.y) : d.state.y;\n      },\n      xScale: xScale,\n      yScale: yScale,\n      fill: fill,\n      fillOpacity: fillOpacity,\n      stroke: \"transparent\",\n      strokeWidth: strokeWidth,\n      curve: curveBasis\n    }), showLine && strokeWidth > 0 && React.createElement(LinePath, {\n      data: modifiedData,\n      x: function x(d) {\n        return xScale.invert ? xScale.invert(d.state.x) : d.state.x;\n      },\n      y: function y(d) {\n        return yScale.invert ? yScale.invert(d.state.y) : d.state.y;\n      },\n      xScale: xScale,\n      yScale: yScale,\n      stroke: stroke,\n      strokeWidth: strokeWidth,\n      strokeDasharray: strokeDasharray,\n      strokeLinecap: strokeLinecap,\n      curve: curveBasis,\n      glyph: null\n    }));\n  });\n}\n\nAnimatedDensitySeries.propTypes = propTypes;\nAnimatedDensitySeries.defaultProps = defaultProps;\nexport default AnimatedDensitySeries;","map":null,"metadata":{},"sourceType":"module"}