{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport { chartTheme } from '@data-ui/theme';\nimport { Group } from '@vx/group';\nimport { Bar } from '@vx/shape';\nimport AnimatedBarSeries from './animated/AnimatedBarSeries';\nimport callOrValue from '../utils/callOrValue';\nimport { binnedDataShape } from '../utils/propShapes';\nexport var propTypes = {\n  animated: PropTypes.bool,\n  rawData: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  // eslint-disable-line react/no-unused-prop-types\n  binnedData: binnedDataShape,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  fillOpacity: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  horizontal: PropTypes.bool,\n  stroke: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeWidth: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  valueKey: PropTypes.string,\n  onClick: PropTypes.func,\n  // likely injected by parent Histogram\n  binScale: PropTypes.func,\n  valueScale: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseLeave: PropTypes.func\n};\nexport var defaultProps = {\n  animated: true,\n  rawData: [],\n  binnedData: [],\n  binScale: null,\n  fill: chartTheme.colors.default,\n  fillOpacity: 0.7,\n  horizontal: false,\n  onClick: null,\n  onMouseMove: null,\n  onMouseLeave: null,\n  stroke: '#FFFFFF',\n  strokeWidth: 1,\n  valueKey: 'count',\n  valueScale: null\n};\n\nfunction BarSeries(_ref) {\n  var animated = _ref.animated,\n      binnedData = _ref.binnedData,\n      binScale = _ref.binScale,\n      fill = _ref.fill,\n      fillOpacity = _ref.fillOpacity,\n      horizontal = _ref.horizontal,\n      onClick = _ref.onClick,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      stroke = _ref.stroke,\n      strokeWidth = _ref.strokeWidth,\n      valueKey = _ref.valueKey,\n      valueScale = _ref.valueScale;\n  if (!binScale || !valueScale || !binnedData || binnedData.length === 0) return null;\n  var maxBarLength = Math.max.apply(Math, valueScale.range());\n  return React.createElement(Group, null, animated && React.createElement(AnimatedBarSeries, {\n    binnedData: binnedData,\n    binScale: binScale,\n    horizontal: horizontal,\n    fill: fill,\n    fillOpacity: fillOpacity,\n    onClick: onClick,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    valueKey: valueKey,\n    valueScale: valueScale\n  }), !animated && binnedData.map(function (d, i) {\n    var binPosition = binScale(d.bin || (horizontal ? d.bin1 : d.bin0));\n    var barLength = horizontal ? valueScale(d[valueKey]) : maxBarLength - valueScale(d[valueKey]);\n    var barWidth = binScale.bandwidth ? binScale.bandwidth() // categorical\n    : Math.abs(binScale(binnedData[i].bin1) - binScale(binnedData[i].bin0)); // numeric\n\n    var color = d.fill || callOrValue(fill, d, i);\n    return React.createElement(Bar, {\n      key: \"bar-\" + binPosition,\n      x: horizontal ? 0 : binPosition,\n      y: horizontal ? binPosition : maxBarLength - barLength,\n      width: horizontal ? barLength : barWidth,\n      height: horizontal ? barWidth : barLength,\n      fill: color,\n      fillOpacity: typeof fillOpacity === 'undefined' ? callOrValue(fillOpacity, d, i) : fillOpacity,\n      stroke: d.stroke || callOrValue(stroke, d, i),\n      strokeWidth: d.strokeWidth || callOrValue(strokeWidth, d, i),\n      onClick: onClick && function () {\n        return function (event) {\n          onClick({\n            event: event,\n            data: binnedData,\n            datum: d,\n            color: color,\n            index: i\n          });\n        };\n      },\n      onMouseMove: onMouseMove && function () {\n        return function (event) {\n          onMouseMove({\n            event: event,\n            data: binnedData,\n            datum: d,\n            color: color,\n            index: i\n          });\n        };\n      },\n      onMouseLeave: onMouseLeave && function () {\n        return onMouseLeave;\n      }\n    });\n  }));\n}\n\nBarSeries.propTypes = propTypes;\nBarSeries.defaultProps = defaultProps;\nBarSeries.displayName = 'BarSeries';\nexport default BarSeries;","map":null,"metadata":{},"sourceType":"module"}