{"ast":null,"code":"var classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar Point = function () {\n  function Point(_ref) {\n    var _ref$x = _ref.x,\n        x = _ref$x === undefined ? 0 : _ref$x,\n        _ref$y = _ref.y,\n        y = _ref$y === undefined ? 0 : _ref$y;\n    classCallCheck(this, Point);\n    this.x = x;\n    this.y = y;\n  }\n\n  createClass(Point, [{\n    key: \"value\",\n    value: function value() {\n      return {\n        x: this.x,\n        y: this.y\n      };\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray$$1() {\n      return [this.x, this.y];\n    }\n  }]);\n  return Point;\n}();\n\nexport { Point };","map":null,"metadata":{},"sourceType":"module"}