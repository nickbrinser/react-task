{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport debounce from 'lodash/debounce';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nvar ParentSize =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ParentSize, _React$Component);\n\n  function ParentSize(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0\n    };\n    _this.resize = debounce(_this.resize.bind(_assertThisInitialized(_this)), props.debounceTime);\n    _this.setTarget = _this.setTarget.bind(_assertThisInitialized(_this));\n    _this.animationFrameID = null;\n    return _this;\n  }\n\n  var _proto = ParentSize.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this.ro = new ResizeObserver(function (entries\n    /** , observer */\n    ) {\n      if (entries === void 0) {\n        entries = [];\n      }\n\n      entries.forEach(function (entry) {\n        var _entry$contentRect = entry.contentRect,\n            left = _entry$contentRect.left,\n            top = _entry$contentRect.top,\n            width = _entry$contentRect.width,\n            height = _entry$contentRect.height;\n        _this2.animationFrameID = window.requestAnimationFrame(function () {\n          _this2.resize({\n            width: width,\n            height: height,\n            top: top,\n            left: left\n          });\n        });\n      });\n    });\n    this.ro.observe(this.target);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.cancelAnimationFrame(this.animationFrameID);\n    this.ro.disconnect();\n  };\n\n  _proto.resize = function resize(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        top = _ref.top,\n        left = _ref.left;\n    this.setState(function () {\n      return {\n        width: width,\n        height: height,\n        top: top,\n        left: left\n      };\n    });\n  };\n\n  _proto.setTarget = function setTarget(ref) {\n    this.target = ref;\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        debounceTime = _this$props.debounceTime,\n        restProps = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"debounceTime\"]);\n\n    return React.createElement(\"div\", _extends({\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      ref: this.setTarget,\n      className: className\n    }, restProps), children(_extends({}, this.state, {\n      ref: this.target,\n      resize: this.resize\n    })));\n  };\n\n  return ParentSize;\n}(React.Component);\n\nexport { ParentSize as default };\nParentSize.defaultProps = {\n  debounceTime: 300\n};\nParentSize.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  debounceTime: PropTypes.number\n};","map":null,"metadata":{},"sourceType":"module"}