{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nLinearGradient.propTypes = {\n  id: PropTypes.string.isRequired,\n  from: PropTypes.string,\n  to: PropTypes.string,\n  x1: PropTypes.string,\n  y1: PropTypes.string,\n  y2: PropTypes.string,\n  fromOffset: PropTypes.string,\n  fromOpacity: PropTypes.number,\n  toOffset: PropTypes.string,\n  toOpacity: PropTypes.number,\n  rotate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  transform: PropTypes.string\n};\n\nfunction LinearGradient(_ref) {\n  var children = _ref.children,\n      id = _ref.id,\n      from = _ref.from,\n      to = _ref.to,\n      x1 = _ref.x1,\n      y1 = _ref.y1,\n      x2 = _ref.x2,\n      y2 = _ref.y2,\n      _ref$fromOffset = _ref.fromOffset,\n      fromOffset = _ref$fromOffset === undefined ? '0%' : _ref$fromOffset,\n      _ref$fromOpacity = _ref.fromOpacity,\n      fromOpacity = _ref$fromOpacity === undefined ? 1 : _ref$fromOpacity,\n      _ref$toOffset = _ref.toOffset,\n      toOffset = _ref$toOffset === undefined ? '100%' : _ref$toOffset,\n      _ref$toOpacity = _ref.toOpacity,\n      toOpacity = _ref$toOpacity === undefined ? 1 : _ref$toOpacity,\n      rotate = _ref.rotate,\n      transform = _ref.transform,\n      _ref$vertical = _ref.vertical,\n      vertical = _ref$vertical === undefined ? true : _ref$vertical,\n      restProps = objectWithoutProperties(_ref, ['children', 'id', 'from', 'to', 'x1', 'y1', 'x2', 'y2', 'fromOffset', 'fromOpacity', 'toOffset', 'toOpacity', 'rotate', 'transform', 'vertical']);\n\n  if (vertical && !x1 && !x2 && !y1 && !y2) {\n    x1 = '0';\n    x2 = '0';\n    y1 = '0';\n    y2 = '1';\n  }\n\n  return React.createElement('defs', null, React.createElement('linearGradient', _extends({\n    id: id,\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    gradientTransform: rotate ? 'rotate(' + rotate + ')' : transform\n  }, restProps), !!children && children, !children && React.createElement('stop', {\n    offset: fromOffset,\n    stopColor: from,\n    stopOpacity: fromOpacity\n  }), !children && React.createElement('stop', {\n    offset: toOffset,\n    stopColor: to,\n    stopOpacity: toOpacity\n  })));\n}\n\nRadialGradient.propTypes = {\n  id: PropTypes.string.isRequired,\n  from: PropTypes.string,\n  to: PropTypes.string,\n  fromOffset: PropTypes.string,\n  fromOpacity: PropTypes.number,\n  toOffset: PropTypes.string,\n  toOpacity: PropTypes.number,\n  rotate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  transform: PropTypes.string\n};\n\nfunction RadialGradient(_ref) {\n  var children = _ref.children,\n      id = _ref.id,\n      from = _ref.from,\n      to = _ref.to,\n      _ref$fromOffset = _ref.fromOffset,\n      fromOffset = _ref$fromOffset === undefined ? '0%' : _ref$fromOffset,\n      _ref$fromOpacity = _ref.fromOpacity,\n      fromOpacity = _ref$fromOpacity === undefined ? 1 : _ref$fromOpacity,\n      _ref$toOffset = _ref.toOffset,\n      toOffset = _ref$toOffset === undefined ? '100%' : _ref$toOffset,\n      _ref$toOpacity = _ref.toOpacity,\n      toOpacity = _ref$toOpacity === undefined ? 1 : _ref$toOpacity,\n      rotate = _ref.rotate,\n      transform = _ref.transform,\n      restProps = objectWithoutProperties(_ref, ['children', 'id', 'from', 'to', 'fromOffset', 'fromOpacity', 'toOffset', 'toOpacity', 'rotate', 'transform']);\n  return React.createElement('defs', null, React.createElement('radialGradient', _extends({\n    id: id,\n    gradientTransform: rotate ? 'rotate(' + rotate + ')' : transform\n  }, restProps), !!children && children, !children && React.createElement('stop', {\n    offset: fromOffset,\n    stopColor: from,\n    stopOpacity: fromOpacity\n  }), !children && React.createElement('stop', {\n    offset: toOffset,\n    stopColor: to,\n    stopOpacity: toOpacity\n  })));\n}\n\nvar DarkgreenGreen = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#184E86',\n    to: '#57CA85'\n  }, props));\n};\n\nvar LightgreenGreen = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#42E695',\n    to: '#3BB2B8'\n  }, props));\n};\n\nvar OrangeRed = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#FCE38A',\n    to: '#F38181'\n  }, props));\n};\n\nvar PinkBlue = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#F02FC2',\n    to: '#6094EA'\n  }, props));\n};\n\nvar PinkRed = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#F54EA2',\n    to: '#FF7676'\n  }, props));\n};\n\nvar PurpleOrange = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#7117EA',\n    to: '#EA6060'\n  }, props));\n};\n\nvar PurpleRed = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#622774',\n    to: '#C53364'\n  }, props));\n};\n\nvar PurpleTeal = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#5B247A',\n    to: '#1BCEDF'\n  }, props));\n};\n\nvar SteelPurple = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#65799B',\n    to: '#5E2563'\n  }, props));\n};\n\nvar TealBlue = function (props) {\n  return React.createElement(LinearGradient, _extends({\n    from: '#17EAD9',\n    to: '#6078EA'\n  }, props));\n};\n\nexport { LinearGradient, RadialGradient, DarkgreenGreen as GradientDarkgreenGreen, LightgreenGreen as GradientLightgreenGreen, OrangeRed as GradientOrangeRed, PinkBlue as GradientPinkBlue, PinkRed as GradientPinkRed, PurpleOrange as GradientPurpleOrange, PurpleRed as GradientPurpleRed, PurpleTeal as GradientPurpleTeal, SteelPurple as GradientSteelPurple, TealBlue as GradientTealBlue };","map":null,"metadata":{},"sourceType":"module"}