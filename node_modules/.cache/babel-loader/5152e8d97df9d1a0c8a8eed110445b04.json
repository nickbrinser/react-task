{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NodeGroup } from 'react-move';\nimport { chartTheme } from '@data-ui/theme';\nimport { Group } from '@vx/group';\nimport { Bar } from '@vx/shape';\nimport callOrValue from '../../utils/callOrValue';\nimport { binnedDataShape } from '../../utils/propShapes';\nvar propTypes = {\n  rawData: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n  // eslint-disable-line react/no-unused-prop-types\n  binnedData: binnedDataShape,\n  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  fillOpacity: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  horizontal: PropTypes.bool,\n  stroke: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeWidth: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  valueKey: PropTypes.string,\n  onClick: PropTypes.func,\n  // likely injected by parent Histogram\n  binScale: PropTypes.func,\n  valueScale: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  keyAccessor: PropTypes.func\n};\nvar defaultProps = {\n  rawData: [],\n  binnedData: [],\n  binScale: null,\n  fill: chartTheme.colors.default,\n  fillOpacity: 0.7,\n  horizontal: false,\n  onClick: null,\n  onMouseMove: null,\n  onMouseLeave: null,\n  stroke: '#FFFFFF',\n  strokeWidth: 1,\n  valueKey: 'count',\n  valueScale: null,\n  keyAccessor: function keyAccessor(d) {\n    return d.id;\n  }\n};\nvar INDEX_DELAY_MULTIPLIER = 10;\n\nvar getBin = function getBin(d) {\n  return typeof d.bin === 'undefined' ? d.bin0 : d.bin;\n};\n\nvar getBin1 = function getBin1(d) {\n  return typeof d.bin === 'undefined' ? d.bin1 : d.bin;\n};\n\nfunction AnimatedBarSeries(_ref) {\n  var binnedData = _ref.binnedData,\n      valueScale = _ref.valueScale,\n      binScale = _ref.binScale,\n      horizontal = _ref.horizontal,\n      keyAccessor = _ref.keyAccessor,\n      fill = _ref.fill,\n      fillOpacity = _ref.fillOpacity,\n      onClick = _ref.onClick,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      stroke = _ref.stroke,\n      strokeWidth = _ref.strokeWidth,\n      valueKey = _ref.valueKey;\n  var maxBarLength = Math.max.apply(Math, valueScale.range()); // compute once and use throughout\n\n  var barWidths = binnedData.map(function (_, i) {\n    return binScale.bandwidth ? binScale.bandwidth() // categorical\n    : Math.abs(binScale(binnedData[i].bin1) - binScale(binnedData[i].bin0));\n  } // numeric\n  );\n\n  var getValue = function getValue(d) {\n    return d[valueKey];\n  };\n\n  var getX = horizontal ? getValue : getBin;\n  var getY = horizontal ? getBin1 : getValue;\n  var xScale = horizontal ? valueScale : binScale;\n  var yScale = horizontal ? binScale : valueScale;\n  return React.createElement(NodeGroup, {\n    data: binnedData,\n    keyAccessor: keyAccessor,\n    start: function start(d, i) {\n      return {\n        x: horizontal ? 0 : xScale(getX(d)),\n        y: horizontal ? yScale(getY(d)) : maxBarLength,\n        fill: d.fill || callOrValue(fill, d, i),\n        width: horizontal ? 0 : barWidths[i],\n        height: horizontal ? barWidths[i] : 0\n      };\n    },\n    enter: function enter(d, i) {\n      return {\n        x: [horizontal ? 0 : xScale(getX(d))],\n        y: [yScale(getY(d))],\n        width: [horizontal ? xScale(getX(d)) : barWidths[i]],\n        height: [horizontal ? barWidths[i] : maxBarLength - yScale(getY(d))],\n        fill: [d.fill || callOrValue(fill, d, i)],\n        stroke: [d.stroke || callOrValue(stroke, d, i)],\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER * i\n        }\n      };\n    },\n    update: function update(d, i) {\n      return {\n        x: [horizontal ? 0 : xScale(getX(d))],\n        y: [yScale(getY(d))],\n        width: [horizontal ? xScale(getX(d)) : barWidths[i]],\n        height: [horizontal ? barWidths[i] : maxBarLength - yScale(getY(d))],\n        fill: [d.fill || callOrValue(fill, d, i)],\n        stroke: [d.stroke || callOrValue(stroke, d, i)],\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER * i\n        }\n      };\n    },\n    leave: function leave(d, i) {\n      return {\n        x: horizontal ? 0 : xScale(getX(d)),\n        y: horizontal ? yScale(getY(d)) : maxBarLength,\n        width: horizontal ? 0 : barWidths[i],\n        height: horizontal ? barWidths[i] : 0,\n        timing: {\n          duration: 300,\n          delay: INDEX_DELAY_MULTIPLIER / 2 * i\n        }\n      };\n    }\n  }, function (data) {\n    return React.createElement(Group, null, data.map(function (modifiedDatum, i) {\n      var key = modifiedDatum.key,\n          rawDatum = modifiedDatum.data,\n          d = modifiedDatum.state;\n      return React.createElement(Bar, {\n        key: \"bar\" + key,\n        x: d.x,\n        y: d.y,\n        width: d.width,\n        height: d.height,\n        fill: d.fill,\n        stroke: d.stroke,\n        fillOpacity: typeof fillOpacity === 'undefined' ? callOrValue(fillOpacity, rawDatum, i) : fillOpacity,\n        strokeWidth: rawDatum.strokeWidth || callOrValue(strokeWidth, rawDatum, i),\n        onClick: onClick && function () {\n          return function (event) {\n            onClick({\n              event: event,\n              datum: rawDatum,\n              data: binnedData,\n              color: d.fill,\n              index: i\n            });\n          };\n        },\n        onMouseMove: onMouseMove && function () {\n          return function (event) {\n            onMouseMove({\n              event: event,\n              datum: rawDatum,\n              data: binnedData,\n              color: d.fill,\n              index: i\n            });\n          };\n        },\n        onMouseLeave: onMouseLeave && function () {\n          return onMouseLeave;\n        }\n      });\n    }));\n  });\n}\n\nAnimatedBarSeries.propTypes = propTypes;\nAnimatedBarSeries.defaultProps = defaultProps;\nexport default AnimatedBarSeries;","map":null,"metadata":{},"sourceType":"module"}