{"ast":null,"code":"import { scaleBand, scalePoint, scaleLinear, scaleTime, scaleUtc, scaleLog, scalePow, scaleOrdinal, scaleQuantize, scaleQuantile, scaleThreshold } from 'd3-scale';\n\nvar band = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      padding = _ref.padding,\n      paddingInner = _ref.paddingInner,\n      paddingOuter = _ref.paddingOuter,\n      align = _ref.align,\n      tickFormat = _ref.tickFormat;\n  var scale = scaleBand();\n  scale.type = 'band';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (padding) scale.padding(padding);\n  if (paddingInner) scale.paddingInner(paddingInner);\n  if (paddingOuter) scale.paddingOuter(paddingOuter);\n  if (align) scale.align(align);\n  if (tickFormat) scale.tickFormat = tickFormat;\n  return scale;\n};\n\nvar point = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      padding = _ref.padding,\n      align = _ref.align,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice;\n  var scale = scalePoint();\n  scale.type = 'point';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (padding) scale.padding(padding);\n  if (align) scale.align(align);\n  return scale;\n};\n\nvar linear = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n  var scale = scaleLinear();\n  scale.type = 'linear';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  return scale;\n};\n\nvar time = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n  var scale = scaleTime();\n  scale.type = 'time';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  return scale;\n};\n\nvar utc = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n  var scale = scaleUtc();\n  scale.type = 'utc';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  return scale;\n};\n\nvar log = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      base = _ref.base,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n  var scale = scaleLog();\n  scale.type = 'log';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  if (base) scale.base(base);\n  return scale;\n};\n\nvar power = function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      exponent = _ref.exponent,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n  var scale = scalePow();\n  scale.type = 'power';\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  if (exponent) scale.exponent(exponent);\n  return scale;\n};\n\nvar ordinal = function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain,\n      unknown = _ref.unknown;\n  var scale = scaleOrdinal();\n  scale.type = 'ordinal';\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  if (unknown) scale.unknown(unknown);\n  return scale;\n};\n\nvar quantize = function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain,\n      ticks = _ref.ticks,\n      tickFormat = _ref.tickFormat,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice;\n  var scale = scaleQuantize();\n  scale.type = 'quantize';\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (ticks) scale.ticks(ticks);\n  if (tickFormat) scale.tickFormat(tickFormat);\n  return scale;\n};\n\nvar quantile = function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain;\n  var scale = scaleQuantile();\n  scale.type = 'quantile';\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  return scale;\n};\n\nvar threshold = function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain;\n  var scale = scaleThreshold();\n  scale.type = 'threshold';\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  return scale;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar has = Object.prototype.hasOwnProperty;\n\nfunction updateScale(scale, _ref) {\n  var args = objectWithoutProperties(_ref, []);\n  var nextScale = scale.copy();\n  Object.keys(args).forEach(function (key) {\n    if (has.call(nextScale, key)) nextScale[key](args[key]);\n  });\n  return nextScale;\n}\n\nexport { band as scaleBand, point as scalePoint, linear as scaleLinear, time as scaleTime, utc as scaleUtc, log as scaleLog, power as scalePower, ordinal as scaleOrdinal, quantize as scaleQuantize, quantile as scaleQuantile, threshold as scaleThreshold, updateScale };","map":null,"metadata":{},"sourceType":"module"}