{"ast":null,"code":"import _defineProperty from \"/Users/nicholas/Desktop/react-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/nicholas/Desktop/react-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nicholas/Desktop/react-client/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport LineChart from './components/lineChart/LineChart';\nimport HistChart from './components/barChart/HistChart';\nimport { InputAlert } from './components/inputAlert/InputAlert';\nimport { Message } from 'semantic-ui-react';\nimport { ReactComponent as Loading } from \"@svgr/webpack?-svgo,+titleProp,+ref!./assets/graph-visual.svg\";\nimport './App.css';\nconst socket = socketIOClient('http://127.0.0.1:3000');\n\nfunction App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        response = _useState2[0],\n        setResponse = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alertField = _useState4[0],\n        setAlert = _useState4[1];\n\n  const _useState5 = useState({\n    labels: [],\n    datasets: [{\n      label: 'Line Chart',\n      backgrounColor: 'rgba(0,0,0,0)',\n      borderColor: '#ffffff',\n      pointBackgrounColor: 'rgb(202, 230, 151)',\n      pointBorderColor: 'rgb(202, 230, 151)',\n      borderWidth: '2',\n      lineTension: 0.45,\n      data: []\n    }]\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lineChartData = _useState6[0],\n        setLine = _useState6[1];\n\n  const _useState7 = useState({\n    data: []\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        barChartData = _useState8[0],\n        setBar = _useState8[1];\n\n  const _useState9 = useState(),\n        _useState10 = _slicedToArray(_useState9, 2),\n        currentValue = _useState10[0],\n        setCurrent = _useState10[1];\n\n  useEffect(() => {\n    socket.on('data', res => {\n      const y = new Date(res.timestamp).toLocaleTimeString();\n      const x = res.value;\n      setLine(prevState => _objectSpread({}, prevState, {\n        labels: [...prevState.labels, y],\n        datasets: [_objectSpread({}, prevState.datasets[0], {\n          data: [...prevState.datasets[0].data, x]\n        })]\n      }));\n      setBar(prevState => _objectSpread({}, prevState, {\n        data: [...prevState.data, x]\n      }));\n      setCurrent(res.value);\n      setResponse(true);\n    });\n    socket.on('disconnect', () => {\n      socket.disconnect();\n      setResponse(false);\n      console.log('disconnected from server');\n    });\n  }, []);\n\n  const handleChange = e => {\n    setAlert({\n      alertField: e.target.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, response ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    data: lineChartData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(HistChart, {\n    data: barChartData.data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))), React.createElement(InputAlert, {\n    placeholder: \"Alert Threshold\",\n    handleChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), currentValue > parseInt(alertField.alertField) && alertField !== '' ? React.createElement(\"div\", {\n    className: \"alert-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Message, {\n    color: \"red\",\n    size: \"huge\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, ' ', \"Threshold Exceeded \", alertField.alertfield, \"!\")) : null) : React.createElement(Loading, {\n    className: \"graph-visual\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nicholas/Desktop/react-client/src/App.js"],"names":["React","useState","useEffect","socketIOClient","LineChart","HistChart","InputAlert","Message","socket","App","response","setResponse","alertField","setAlert","labels","datasets","label","backgrounColor","borderColor","pointBackgrounColor","pointBorderColor","borderWidth","lineTension","data","lineChartData","setLine","barChartData","setBar","currentValue","setCurrent","on","res","y","Date","timestamp","toLocaleTimeString","x","value","prevState","disconnect","console","log","handleChange","e","target","textAlign","parseInt","alertfield"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport socketIOClient from 'socket.io-client'\nimport LineChart from './components/lineChart/LineChart'\nimport HistChart from './components/barChart/HistChart'\nimport { InputAlert } from './components/inputAlert/InputAlert'\nimport { Message } from 'semantic-ui-react'\nimport { ReactComponent as Loading } from './assets/graph-visual.svg'\n\nimport './App.css'\n\nconst socket = socketIOClient('http://127.0.0.1:3000')\n\nfunction App () {\n  const [response, setResponse] = useState(false)\n  const [alertField, setAlert] = useState('')\n  const [lineChartData, setLine] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Line Chart',\n        backgrounColor: 'rgba(0,0,0,0)',\n        borderColor: '#ffffff',\n        pointBackgrounColor: 'rgb(202, 230, 151)',\n        pointBorderColor: 'rgb(202, 230, 151)',\n        borderWidth: '2',\n        lineTension: 0.45,\n        data: []\n      }\n    ]\n  })\n  const [barChartData, setBar] = useState({\n    data: []\n  })\n  const [currentValue, setCurrent] = useState()\n\n  useEffect(() => {\n    socket.on('data', res => {\n      const y = new Date(res.timestamp).toLocaleTimeString()\n      const x = res.value\n      setLine((prevState) => ({\n        ...prevState,\n        labels: [...prevState.labels, y],\n        datasets: [{ ...prevState.datasets[0], data: [...prevState.datasets[0].data, x] }]\n      }))\n\n      setBar((prevState) => ({\n        ...prevState,\n        data: [...prevState.data, x]\n      }))\n      setCurrent(res.value)\n      setResponse(true)\n    })\n    socket.on('disconnect', () => {\n      socket.disconnect()\n      setResponse(false)\n      console.log('disconnected from server')\n    })\n  }, [])\n  const handleChange = (e) => {\n    setAlert({\n      alertField: e.target.value\n    })\n  }\n  return (\n\n    <div style={{ textAlign: 'center' }}>\n      {response ? (\n        <div>\n          <div className='card-list'>\n            <div className='card-container'>\n              <LineChart\n                data={lineChartData}\n              />\n            </div>\n            <div className='card-container'>\n              <HistChart\n                data={barChartData.data}\n              />\n            </div>\n          </div>\n          <InputAlert\n            placeholder='Alert Threshold'\n            handleChange={handleChange}\n          />\n          {currentValue > parseInt(alertField.alertField) && alertField !== '' ? (\n            <div className='alert-message'>\n              <Message color='red' size='huge'>\n                {' '}\n                Threshold Exceeded {alertField.alertfield}!\n              </Message>\n            </div>\n          ) : null}\n        </div>\n      ) : (\n        <Loading className='graph-visual' />\n      )}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}