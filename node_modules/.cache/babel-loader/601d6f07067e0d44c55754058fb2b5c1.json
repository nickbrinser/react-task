{"ast":null,"code":"import caseInsensitiveSort from './caseInsensitiveSort';\n\nvar sortBins = function sortBins(a, b) {\n  return caseInsensitiveSort(a.bin, b.bin);\n};\n/*\n * handles binning of categorical data by series index\n * if binValues are passed, ignores other bin values that are encountered\n *\n * returns an object of bins keyed on series index with the following shape\n *  {\n *    [seriesIdx]: Array<Object{ bin: String, data: Array<datum>, count: Number }>,\n *  }\n */\n\n\nexport default function binCategoricalData(_ref) {\n  var rawDataByIndex = _ref.rawDataByIndex,\n      valueAccessor = _ref.valueAccessor,\n      _ref$binValues = _ref.binValues,\n      binValues = _ref$binValues === void 0 ? null : _ref$binValues;\n  var binsByIndex = {};\n  Object.keys(rawDataByIndex).forEach(function (index) {\n    var data = rawDataByIndex[index];\n    var bins = {};\n    data.forEach(function (datum) {\n      var bin = valueAccessor(datum);\n      bins[bin] = bins[bin] || {\n        bin: bin,\n        data: [],\n        count: 0,\n        id: bin\n      };\n      bins[bin].data.push(datum);\n      bins[bin].count += 1;\n    }); // convert to an array of bins\n\n    if (binValues) {\n      binsByIndex[index] = binValues.map(function (bin) {\n        return bins[bin] || {\n          bin: bin,\n          count: 0,\n          data: []\n        };\n      });\n    } else {\n      binsByIndex[index] = Object.values(bins).sort(sortBins);\n    }\n  });\n  return binsByIndex;\n}","map":null,"metadata":{},"sourceType":"module"}