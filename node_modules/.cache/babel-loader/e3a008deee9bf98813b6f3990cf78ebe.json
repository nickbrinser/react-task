{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport ResizeObserver from 'resize-observer-polyfill';\nexport default function withParentSize(BaseComponent) {\n  var WrappedComponent =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(WrappedComponent, _React$Component);\n\n    function WrappedComponent(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      _this.state = {\n        parentWidth: null,\n        parentHeight: null\n      };\n      _this.animationFrameID = null;\n      _this.debouncedResize = debounce(_this.resize.bind(_assertThisInitialized(_this)), props.debounceTime).bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    var _proto = WrappedComponent.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this2 = this;\n\n      this.ro = new ResizeObserver(function (entries\n      /** , observer */\n      ) {\n        entries.forEach(function (entry) {\n          var _entry$contentRect = entry.contentRect,\n              width = _entry$contentRect.width,\n              height = _entry$contentRect.height;\n          _this2.animationFrameID = window.requestAnimationFrame(function () {\n            _this2.debouncedResize({\n              width: width,\n              height: height\n            });\n          });\n        });\n      });\n      this.ro.observe(this.container);\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      window.cancelAnimationFrame(this.animationFrameID);\n      this.ro.disconnect();\n    };\n\n    _proto.resize = function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      this.setState({\n        parentWidth: width,\n        parentHeight: height\n      });\n    };\n\n    _proto.render = function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          parentWidth = _this$state.parentWidth,\n          parentHeight = _this$state.parentHeight;\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        ref: function ref(_ref2) {\n          _this3.container = _ref2;\n        }\n      }, parentWidth !== null && parentHeight !== null && React.createElement(BaseComponent, _extends({\n        parentWidth: parentWidth,\n        parentHeight: parentHeight\n      }, this.props)));\n    };\n\n    return WrappedComponent;\n  }(React.Component);\n\n  WrappedComponent.propTypes = {\n    debounceTime: PropTypes.number\n  };\n  WrappedComponent.defaultProps = {\n    debounceTime: 300\n  };\n  return WrappedComponent;\n}","map":null,"metadata":{},"sourceType":"module"}