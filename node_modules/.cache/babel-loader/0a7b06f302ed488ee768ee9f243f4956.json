{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function withScreenSize(BaseComponent) {\n  var WrappedComponent =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(WrappedComponent, _React$Component);\n\n    function WrappedComponent(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      _this.state = {\n        screenWidth: null,\n        screenHeight: null\n      };\n      _this.handleResize = debounce(_this.resize.bind(_assertThisInitialized(_this)), props.windowResizeDebounceTime).bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    var _proto = WrappedComponent.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      window.addEventListener('resize', this.handleResize, false);\n      this.resize();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize, false);\n    };\n\n    _proto.resize = function resize()\n    /** event */\n    {\n      this.setState(function ()\n      /** prevState, props */\n      {\n        return {\n          screenWidth: window.innerWidth,\n          screenHeight: window.innerHeight\n        };\n      });\n    };\n\n    _proto.render = function render() {\n      var _this$state = this.state,\n          screenWidth = _this$state.screenWidth,\n          screenHeight = _this$state.screenHeight;\n      if (!screenWidth && !screenHeight) return null;\n      return React.createElement(BaseComponent, _extends({\n        screenWidth: screenWidth,\n        screenHeight: screenHeight\n      }, this.props));\n    };\n\n    return WrappedComponent;\n  }(React.Component);\n\n  WrappedComponent.propTypes = {\n    windowResizeDebounceTime: PropTypes.number\n  };\n  WrappedComponent.defaultProps = {\n    windowResizeDebounceTime: 300\n  };\n  return WrappedComponent;\n}","map":null,"metadata":{},"sourceType":"module"}