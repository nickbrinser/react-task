{"ast":null,"code":"function _objectWithoutPropertiesLoose(a, b) {\n  if (null == a) return {};\n  var c,\n      d,\n      e = {},\n      f = Object.keys(a);\n\n  for (d = 0; d < f.length; d++) {\n    c = f[d], 0 <= b.indexOf(c) || (e[c] = a[c]);\n  }\n\n  return e;\n}\n\nfunction _inheritsLoose(a, b) {\n  a.prototype = Object.create(b.prototype), a.prototype.constructor = a, a.__proto__ = b;\n}\n\nfunction _assertThisInitialized(a) {\n  if (void 0 === a) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return a;\n}\n\nfunction _extends() {\n  return _extends = Object.assign || function (a) {\n    for (var b, c = 1; c < arguments.length; c++) {\n      for (var d in b = arguments[c], b) {\n        Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);\n      }\n    }\n\n    return a;\n  }, _extends.apply(this, arguments);\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport localPoint from \"@vx/event/build/localPoint\";\nimport withTooltip from \"@vx/tooltip/build/enhancers/withTooltip\";\nimport TooltipWithBounds, { withTooltipPropTypes as vxTooltipPropTypes } from \"@vx/tooltip/build/tooltips/TooltipWithBounds\";\nexport { default as Tooltip } from \"@vx/tooltip/build/tooltips/Tooltip\";\nexport var withTooltipPropTypes = {\n  onMouseMove: PropTypes.func,\n  // expects to be called like func({ event, datum })\n  onMouseLeave: PropTypes.func,\n  // expects to be called like func({ event, datum })\n  tooltipData: PropTypes.any\n};\nexport var propTypes = _extends({}, vxTooltipPropTypes, {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  className: PropTypes.string,\n  HoverStyles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  renderTooltip: PropTypes.func,\n  styles: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  TooltipComponent: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  tooltipProps: PropTypes.object,\n  // eslint-disable-line react/forbid-prop-types\n  tooltipTimeout: PropTypes.number\n});\n\nvar defaultProps = {\n  className: null,\n  HoverStyles: function a() {\n    return React.createElement(\"style\", {\n      type: \"text/css\"\n    }, \"\\n      .vx-arc:hover,\\n      .vx-bar:hover,\\n      .vx-glyph-dot:hover {\\n        opacity: 0.7;\\n      }\\n    \");\n  },\n  renderTooltip: null,\n  styles: {\n    display: \"inline-block\",\n    position: \"relative\"\n  },\n  TooltipComponent: TooltipWithBounds,\n  tooltipProps: null,\n  tooltipTimeout: 200\n},\n    WithTooltip =\n/*#__PURE__*/\nfunction (a) {\n  function b(b) {\n    var c;\n    return c = a.call(this, b) || this, c.handleMouseMove = c.handleMouseMove.bind(_assertThisInitialized(_assertThisInitialized(c))), c.handleMouseLeave = c.handleMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(c))), c.tooltipTimeout = null, c;\n  }\n\n  _inheritsLoose(b, a);\n\n  var c = b.prototype;\n  return c.componentWillUnmount = function a() {\n    this.tooltipTimeout && clearTimeout(this.tooltipTimeout);\n  }, c.handleMouseMove = function h(a) {\n    var b = a.event,\n        c = a.datum,\n        d = a.coords,\n        e = _objectWithoutPropertiesLoose(a, [\"event\", \"datum\", \"coords\"]),\n        f = this.props.showTooltip;\n\n    this.tooltipTimeout && clearTimeout(this.tooltipTimeout);\n    var g = {\n      x: 0,\n      y: 0\n    };\n    b && b.target && \"focus\" !== b.type && b.target.ownerSVGElement && (g = localPoint(b.target.ownerSVGElement, b)), g = _extends({}, g, d), f({\n      tooltipLeft: g.x,\n      tooltipTop: g.y,\n      tooltipData: _extends({\n        event: b,\n        datum: c\n      }, e)\n    });\n  }, c.handleMouseLeave = function d() {\n    var a = this.props,\n        b = a.tooltipTimeout,\n        c = a.hideTooltip;\n    this.tooltipTimeout = setTimeout(function () {\n      c();\n    }, b);\n  }, c.render = function o() {\n    var a = this.props,\n        b = a.children,\n        c = a.className,\n        d = a.HoverStyles,\n        e = a.tooltipData,\n        f = a.tooltipOpen,\n        g = a.tooltipLeft,\n        h = a.tooltipTop,\n        i = a.tooltipProps,\n        j = a.renderTooltip,\n        k = a.styles,\n        l = a.TooltipComponent,\n        m = {\n      onMouseMove: this.handleMouseMove,\n      onMouseLeave: this.handleMouseLeave,\n      tooltipData: e\n    },\n        n = j && f && l && j(e);\n    return React.createElement(\"div\", {\n      style: k,\n      className: c\n    }, \"function\" == typeof b ? b(m) : React.cloneElement(React.Children.only(b), m), !!n && React.createElement(l, _extends({\n      key: Math.random(),\n      top: h,\n      left: g\n    }, i), n), d && React.createElement(d, null));\n  }, b;\n}(React.PureComponent);\n\nWithTooltip.propTypes = propTypes, WithTooltip.defaultProps = defaultProps;\nexport default withTooltip(WithTooltip);","map":null,"metadata":{},"sourceType":"module"}